<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Korzh.EasyQuery.Linq</name>
    </assembly>
    <members>
        <member name="T:Korzh.EasyQuery.ContextLoadingMapper">
            <summary>
            Class ContextLoadingMapper.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ContextLoadingMapper.TypeMapper">
            <summary>
            Gets or sets the type mapper.
            </summary>
            <value>The type mapper.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ContextLoadingMapper.PropertyMapper">
            <summary>
            Gets or sets the property mapper.
            </summary>
            <value>The property mapper.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.EntityTypeLoader.LoadEntityFromType(Korzh.EasyQuery.Entity,System.Type,System.String,Korzh.EasyQuery.Entity,System.Collections.Generic.List{System.Type})">
            <summary>
            Loads entity from some type.
            </summary>
            <param name="entity"></param>
            <param name="type">The type.</param>
            <param name="entityName"></param>
            <param name="parent">The parent entity.</param>
            <param name="processedTypes">List of types to ignore (to prevent loops).</param>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.EntityAttrTypeLoader">
            <summary>
            Represents one entity attribute of data model.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.EntityAttrTypeLoader.LoadAttrFromProperty(Korzh.EasyQuery.EntityAttr,System.Reflection.PropertyInfo,Korzh.EasyQuery.Entity)">
            <summary>
            Fills the content of entity attribute by some property (specified by PropertyInfo object).
            </summary>
            <param name="property">The property.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.LinqBuilderExtensions">
            <summary>
            Exposes some extension methods for LINQ querying
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqBuilderExtensions.DynamicQuery``1(System.Collections.Generic.IEnumerable{``0},Korzh.EasyQuery.Query)">
            <summary>
            Filters a sequence of values based on a predicate specified by Query.
            </summary>
            <typeparam name="T">Any type</typeparam>
            <param name="source">The source - some IEnumerable object.</param>
            <param name="query">The query - a <see cref="T:Korzh.EasyQuery.Query" /> object.</param>
            <param name="orderByProperty">The name of the property to order by the result list.</param>
            <param name="descending">if set to <c>true</c> then we use descending order.</param>
            <returns>A IEnumerable&lt;T&gt; that contains elements from the input sequence that satisfy the conditions defined in query.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqBuilderExtensions.DynamicQuery``1(System.Linq.IQueryable{``0},Korzh.EasyQuery.Query,System.String,System.Boolean,Korzh.EasyQuery.QueryFormats)">
            <summary>
            Filters a sequence of values based on a predicate specified by Query. 
            </summary>
            <typeparam name="T">Any type</typeparam>
            <param name="source">The source - some IQueryable object.</param>
            <param name="query">The query - a <see cref="T:Korzh.EasyQuery.Query"/> object.</param>
            <param name="orderByProperty">The name of the property to order by the result list.</param>
            <param name="descending">if set to <c>true</c> then we use descending order.</param>
            <returns>A IQueryable&lt;T&gt; that contains elements from the input sequence that satisfy the conditions defined in query.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqBuilderExtensions.FullTextSearchQuery``1(System.Linq.IQueryable{``0},System.String,Korzh.EasyQuery.Linq.FullTextSearchOptions)">
            <summary>
            Filters a sequence of values based on a fulltext search predicate 
            </summary>
            <typeparam name="T">Any type</typeparam>
            <param name="source">The source - some IQueryable object.</param>
            <param name="text">The text - meaning of the search</param>
            <param name="options">The options for full-text search</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.FullTextSearchOptions">
            <summary>
            Contains options for full text search
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.FullTextSearchOptions.Filter">
            <summary>
            Lamda expression, which filters properties to use in full text search
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.FullTextSearchOptions.OrderBy">
            <summary>
            The name of the property to order by the result list
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.FullTextSearchOptions.IsDescendingOrder">
            <summary>
            if set to <c>true</c> then we use descending order
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.FullTextSearchOptions.Depth">
            <summary>
            Depth of full text search. 
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.LinqQueryBuilder">
            <summary>
            Builds Linq expressions
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.#ctor(Korzh.EasyQuery.Query,System.Object,Korzh.EasyQuery.Linq.MergeTypesStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Linq.LinqQueryBuilder"/> class.
            </summary>
            <param name="query">The query.</param>
            <param name="context">The context.</param>
            <param name="strategy">The merge strategy.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.#ctor(Korzh.EasyQuery.Query,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This constructor overload allows only Build generic method to be used in building queries because no context is specified and required for it
            </summary>
            <param name="query">The query.</param>
            <param name="optionsDict">Different options (usually got from JSON object).</param>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.Result">
            <summary>
            Gets the result object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.GetResult">
            <summary>
            Gets the result object
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.UseUtcTime">
            <summary>
            Gets or sets a value indicating whether the query builder will use UTC time zone for all date/time values (like FirstDayOfYear and others).
            </summary>
            <value>
            	<see langword="true"/> whether the UTC time is used; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.TimezoneOffset">
            <summary>
            Gets or sets the timezone offset for the special date values (like FirstDayOfYear).
            </summary>
            <value>
            Timezone offset in minutes. The default is 0
            </value>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.LinqQueryBuilder.propertyChain">
            <summary>
            Stores the names of created properties in constructed types
            </summary>
            <example>CustomerId in 'Order' becomes Order_CustomerId in 'Order_Employee123' </example>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.CreateKey(System.String,System.String)">
            <summary>
            Creates the key for the propertyChain dictionary
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.AddPropertyLink(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a link indicating the new property name in constructed type
            </summary>
            <param name="currentType"></param>
            <param name="currentProperty"></param>
            <param name="nextType"></param>
            <param name="nextProperty"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.GetPropertyForType(System.String,System.String,System.String)">
            <summary>
            Gets the property name in the specified type 
            </summary>
            <param name="baseType"></param>
            <param name="baseProperty"></param>
            <param name="type"></param>
            <returns></returns>
            <example>Returns Order_CusomerId if called like GetPropertyForType(Order,CustomerId,Order_Employee123)</example>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.GetKeyForType(System.String,System.String)">
            <summary>
            Gets the propertyChain key for specified baseKey and type
            </summary>
            <param name="baseKey"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.GetLastKey(System.String)">
            <summary>
            Gets the last key in the propertyChain for the specified base key
            </summary>
            <param name="baseKey"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.GetLastPropertyName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the property name for last key in the propertyChain for the specified property
            </summary>
            <param name="pi">The PropertyInfo.</param>
            <returns>System.String</returns>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.LinqQueryBuilder.usedAttributes">
            <summary>
            Attributes used in both query columns and conditions
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.MergeStrategy">
            <summary>
            Strategy for merging types in Join operations
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.MergeTypes(System.Type,System.Type,System.Int32)">
            <summary>
            Creates the new type which consists of all properties of the used types
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <param name="queryHash"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.CreatePropertyName(System.Reflection.PropertyInfo)">
            <summary>
            Creates the new property name for use in MergeTypes
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.LinqQueryBuilder.tree">
            <summary>
            Tree which if created from EntityGraph
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.LinqQueryBuilder.whereType">
            <summary>
            Types for the respective clauses 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.LinqQueryBuilder.selectType">
            <summary>
            Types for the respective clauses 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.LinqQueryBuilder.groupingType">
            <summary>
            Types for the respective clauses 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.LinqQueryBuilder.keyType">
            <summary>
            Types for the respective clauses 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.LinqQueryBuilder.conditionParameter">
            <summary>
            Parameter of the current condition type
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.SelectDistinct">
            <summary>
            Gets or sets a value indicating whether the result set must not contain duplicates.
            </summary>
            <value>
            	<see langword="true"/> whether the result set must not contain duplicates; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.ResultType">
            <summary>
            Type of result set
            </summary>
            <value>The type of the result.</value>C:\Projects\EasyQuery\EasyQuery.Kernel\src\Korzh.EasyQuery\BaseQueryBuilder.cs
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.Build(System.Object)">
            <summary>
            Builds the query and returns IQueryable object.
            </summary>
            <param name="context">The context.</param>
            <returns>IQueryable.</returns>
            <exception cref="T:System.NullReferenceException">Context is null. Use Build(object context) method</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.CanBuild">
            <summary>
            Determines whether there is enough information to build the query
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.Take">
            <summary>
            Gets or sets the number of items that will be taken from result set.
            </summary>
            <value>The number of items to be taken.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.Skip">
            <summary>
            Gets or sets the number of items that will be skipped from result set.
            </summary>
            <value>The number of items to be skipped.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.BuildIEnumerable(System.Object)">
            <summary>
            Builds IEnumerable expression for use in Linq2Objects scenarios, in other cases consider using Build() method for building IQueryable expression
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.LinqQueryBuilder.BuilderResult`1">
            <summary>
            Represents result of LinqQueryBuilder work
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.BuilderResult`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Linq.LinqQueryBuilder.BuilderResult`1"/> class.
            </summary>
            <param name="whereExpression">The where expression.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Linq.LinqQueryBuilder.BuilderResult`1.WhereExpression">
            <summary>
            Gets the where expression.
            </summary>
            <value>The where expression.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilder.Build``1">
            <summary>
            Builds query and returns the expression inside ResultObject structure.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>ResultObject&lt;T&gt;.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.MergeTypesStrategy">
            <summary>
            Represents the strategy of merging of two types
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.MergeTypesStrategy.AllProperties">
            <summary>
            All properties in both types will go into result type
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.MergeTypesStrategy.UsedProperties">
            <summary>
            Only used properties will be merged
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.PropertyInfoExtensions">
            <summary>
            Static class whic contains extension methods for PropertyInfo class
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.PropertyInfoExtensions.Mapped(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Filters the list of properties (defined by source parameter) to return only those which does not have "NotMapped" attribute.
            </summary>
            <param name="source">The source list of properties.</param>
            <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqStatement.GetStatement">
            <summary>
            Returns the statement (SQL, filter expression, etc - depending on the concrete QueryBuilderResult type).
            </summary>
            <returns>System.String.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.LinqQueryBuilderError">
            <summary>
            Class LinqQueryBuilderError.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.Linq.LinqQueryBuilderError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Linq.LinqQueryBuilderError" /> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ModelLinqExtensions.LoadFromEntityType(Korzh.EasyQuery.DataModel,System.Type)">
            <summary>
            Loads model from some type (class). 
            All properties of this class with primitive types will be added as attributes of the root entity.
            All complex type properties - as sub-entities and so on recursively .
            </summary>
            <param name="type">The type (class) of some model's entity.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ModelLinqExtensions.LoadFromEntityType(Korzh.EasyQuery.DataModel,System.Type,Korzh.EasyQuery.Linq.ContextLoadingOptions)">
            <summary>
            Loads model from some type (class). 
            All properties of this class with primitive types will be added as attributes of the root entity.
            All complex type properties - as sub-entities and so on recursively .
            </summary>
            <param name="type">The type (class) of some model's entity.</param>
            <param name="loadingOptions">Some loading options</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ModelLinqExtensions.LoadFromContextType(Korzh.EasyQuery.DataModel,System.Type)">
            <summary>
            Loads model from some context class.
            All IEnumerable properties of this class will be represented as entities in result model.
            All primitive type properties of generic type parameter class for each such IEnumerable will be added as attributes of corresponding entity.
            </summary>
            <param name="type">The type of context class.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ModelLinqExtensions.LoadFromContextType(Korzh.EasyQuery.DataModel,System.Type,Korzh.EasyQuery.Linq.ContextLoadingOptions)">
            <summary>
            Loads model from some context class.
            All IEnumerable properties of this class will be represented as entities in result model.
            All primitive type properties of generic type parameter class for each such IEnumerable will be added as attributes of corresponding entity.
            </summary>
            <param name="type">The type of context class.</param>
            <param name="loadingOptions">Some options</param>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.ObjectModelLoaderError">
            <summary>
            Exception class for data model errors
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ObjectModelLoaderError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Linq.ObjectModelLoaderError"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.ObjectModelLoader">
            <summary>
            Represents a data model
            </summary>
            <remarks>
            DataModel class represents a model of your data.
            Usually it corresponds to some database but it is not obligatory.
            This basic implementation contains a hierarchical list of entities, their attributes and a list of operators.
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ObjectModelLoader.LoadModelFromType(Korzh.EasyQuery.DataModel,System.Type)">
            <summary>
            Loads model from some type (class). 
            All properties of this class with primitive types will be added as attributes of the root entity.
            All complex type properties - as sub-entities and so on recursively .
            </summary>
            <param name="type">The type (class).</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ObjectModelLoader.LoadFromEntityType(Korzh.EasyQuery.DataModel,System.Type,Korzh.EasyQuery.Linq.ContextLoadingOptions)">
            <summary>
            Loads model from some type (class).
            All properties of this class with primitive types will be added as attributes of the root entity.
            All complex type properties - as sub-entities and so on recursively .
            </summary>
            <param name="type">The type (class).</param>
            <param name="loadingOptions">Different loading options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ObjectModelLoader.LoadFromContext(Korzh.EasyQuery.DataModel,System.Type)">
            <summary>
            Loads model from context class.
            </summary>
            <param name="type">The type of context class.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ObjectModelLoader.LoadFromContextType(Korzh.EasyQuery.DataModel,System.Type,Korzh.EasyQuery.Linq.ContextLoadingOptions)">
            <summary>
            Loads model from context class.
            </summary>
            <param name="type">The type of context class.</param>
            <param name="options">Different options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Linq.ObjectModelLoader.GetCollectionName(System.Type)">
            <summary>
            Used to get the name of the collection in context
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.Linq.ContextLoadingOptions">
            <summary>
            Represents different options used during loading model from context 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.ContextLoadingOptions.Default">
            <summary>
            The default set of options
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.ContextLoadingOptions.JoinUsingPrimitiveTypes">
            <summary>
            Try to join <see cref="T:System.Type"/>s using primitive type properties as foreign keys (such as OrderID). Navigation properties are used by default
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.ContextLoadingOptions.ScanOnlyQueryable">
            <summary>
            Scan only properties that implement IQueryable interface. By default all IEnumerable are used
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.ContextLoadingOptions.ProcessInheritance">
            <summary>
            Include ancestor's properties
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Linq.ContextLoadingOptions.LeaveNonLinqOperators">
            <summary>
            Leave in loaded model the operators which are not supported in LINQ queries.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.LinqTypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Determines whether the specified type is enumerable (supports <see cref="T:System.Collections.Generic.IEnumerable"/> interface.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type to check is enumerable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.LinqTypeExtensions.IsQueryable(System.Type)">
            <summary>
            Determines whether the specified type implements <see cref="T:System.Linq.IQueryable"/> interface.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type implements IQueryable interface; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.LinqTypeExtensions.IsEnumerableOfSimpleType(System.Type)">
            <summary>
            Determines whether the specified type is an enumerable of some simple type .
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is an enumerable of some simple type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.LinqTypeExtensions.GetDisplayName(System.Reflection.PropertyInfo)">
            <summary>
            Returns the display name of the property.
            This function tries to get the name defined by Display or DisplayName attributes.
            If any of these attributes is not defined - then the property name is returned.
            </summary>
            <param name="pi">The property info.</param>
            <returns>Display name of the property</returns>
        </member>
        <member name="M:Korzh.EasyQuery.LinqTypeExtensions.GetTypeDisplayName(System.Type)">
            <summary>
            Gets the display name of the type.
            This function tries to get the name defined by Entity or EntityName attributes.
            If any of these attributes is not defined - then the type name is returned.
            </summary>
            <param name="type">The type.</param>
            <returns>Display name of the type.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EqServiceProviderLinq">
            <summary>
            Class EqServiceProviderDb.
            Provides basic functionality for building EasyQuery service to process AJAX requests from EasyQuery JavaScript widgets.
            Can be used to create MVC controller, WebService class or WebAPI controller
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EqServiceProviderLinq.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.EqServiceProviderLinq"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EqServiceProviderLinq.DefaultModelLoader(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Default implementation of the model loader <see cref="!:ModelLoader"/>.
            </summary>
            <param name="model">The DataModel object.</param>
            <param name="modelName">Name of the model.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EqServiceProviderLinq.GetResultSetByQueryDict(Korzh.EasyQuery.JsonDict,System.Object)">
            <summary>
            Gets the result set by the query (represented by some IDictionary object) and some context (e.g. DbContext) object.
            This method generates LINQ query, executes it over specified context and returns the result as DataSet.
            </summary>
            <param name="queryDict">The IDictionary object usually created by deserialization of some JSON representation of the query.</param>
            <param name="context">The context.</param>
            <returns>DataSet.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EqServiceProviderLinq.GetResultSetByQuery(Korzh.EasyQuery.Query,System.Object,System.Type,Korzh.EasyQuery.JsonDict)">
            <summary>
            Gets the result set by the query and some context (e.g. DbContext) object.
            This method generates LINQ query, executes it over specified context and returns the result as DataSet.
            </summary>
            <param name="queryDict">The IDictionary object usually created by deserialization of some JSON representation of the query.</param>
            <param name="context">The context.</param>
            <returns>ResultSet.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EqServiceProviderLinq.GetListCore(Korzh.EasyQuery.Services.ListRequestOptions)">
            <summary>
            Returns custom list of values by its name. This method is usually called by GetList action of EasyQueryController.
            </summary>
            <param name="options">The ListRequestOptions object which contains list name and SQL statement when necessary (for SQLLIST value editors).</param>
            <returns>IEnumerable&lt;ListItem&gt; - the list of values. Each item contains ID and Text.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.GdtObjectResultSet">
            <summary>
            Represents result set which can be easly convertend into Google's DataTable format
            </summary>
        </member>
    </members>
</doc>
